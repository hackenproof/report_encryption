async function encryptFileData(data,multiPublicKeys){const publicKeysArray=await Promise.all(multiPublicKeys.map(async key=>{const{keys}=await openpgp.key.readArmored(key);if(keys&&keys.length>0){return keys[0]}else{throw new Error("Invalid PGP public key")}}));try{const{data:encryptedData}=await openpgp.encrypt({message:openpgp.message.fromText(data),publicKeys:publicKeysArray});return encryptedData}catch(error){console.error("Encryption error:",error);throw error}}async function encryptReport(multiPublicKeys,simples){const publicKeysArray=await Promise.all(multiPublicKeys.map(async key=>{const{keys}=await openpgp.key.readArmored(key);if(keys&&keys.length>0){return keys[0]}else{throw new Error("Invalid PGP public key")}}));for(const e of simples){const markdownValue=e.codemirror.getValue();if(markdownValue!==""){if(!isEncrypted(markdownValue)){try{const{data:encryptedData}=await openpgp.encrypt({message:openpgp.message.fromText(markdownValue),publicKeys:publicKeysArray});e.value(encryptedData)}catch(error){console.error("Error encrypting:",error)}}}}}